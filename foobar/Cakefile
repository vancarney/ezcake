## Another Cakefile made with love by ezcake v0.0.1
# require Node::FS
fs = require 'fs'
# require Node::Util
{debug, error, log, print} = require 'util'
# import Spawn and Exec from child_process
{spawn, exec, execFile}=require 'child_process'
# try to import the Which module
try
  which = (require 'which').sync
catch err
  if process.platform.match(/^win/)?
    error 'The which module is required for windows. try "npm install which"'
  which = null
# set Terminal Colors
# ANSI Terminal Colors
bold = '[0;1m'
green = '[0;32m'
red = '[0;31m'
reset = '[0m'
# paths object for module invocation reference
paths=#{
  "demo": [
    "demo"
  ],
  "uglify": [
    "lib"
  ],
  "assets": [
    "src/assets",
    "lib"
  ],
  "coffee": [
    "lib",
    "src/coffee"
  ],
  "jade": [
    "src/jade",
    "demo",
    "src/jade/templates",
    "src/jade/include"
  ]
}
# file extensions for watching
exts=coffee|scss|less|jade|js|scss
# Begin Callback Handlers
coffeeCallback,scssCallback,lessCallback,doccoCallback,compassCallback,minifyCallback
# Begin Tasks
# ## *build*
# Compiles Sources
task 'build', 'Compiles Sources', ()-> build -> log ':)', green
build = ()->
  

# ## *build:release*
# Copy contents of debug to web release folder and minify
task 'build:release', 'Copy contents of debug to web release folder and minify', ()-> build_release -> log ':)', green
build_release = ()->
  exec "cp -r #{paths.release[0]} #{paths.release[1]}" if paths? and paths.release

# ## *watch*
# watch project src folders and build on change
task 'watch', 'watch project src folders and build on change', ()-> watch -> log ':)', green
watch = ()->
  

# ## *docs*
# Generate Documentation
task 'docs', 'Generate Documentation', ()-> docs -> log ':)', green
docs = ()->
  

# ## *minify*
# Minify Generated JS and HTML
task 'minify', 'Minify Generated JS and HTML', ()-> minify -> log ':)', green
minify = ()->
  

# ## *readme*
# Generate ReadMe HTML from Markdown
task 'readme', 'Generate ReadMe HTML from Markdown', ()-> readme -> log ':)', green
readme = ()->
  

# ## *test*
# Runs your test suite.
task 'test', 'Runs your test suite.', (options=[],callback)-> test -> log ':)', green
test = (options=[],callback)->
  

# ## *clean*
# Cleans up generated js paths
task 'clean', 'Cleans up generated js paths', ()-> clean -> log ':)', green
clean = ()->
    try
    for file in paths.coffee
      unless unlinkIfCoffeeFile file
        walk file, (err, results) ->
          for f in results
            unlinkIfCoffeeFile f

    callback?()
  catch err
    console.error red+err

# ## *up2date*
# installs/updates referenced NPMs and Gems
task 'up2date', 'installs/updates referenced NPMs and Gems', ()-> up2date -> log ':)', green
up2date = ()->
  


# Begin Helpers
#  
launch = (cmd, options=[], callback) ->
  cmd = which(cmd) if which
  app = spawn cmd, options
  app.stdout.pipe(process.stdout)
  app.stderr.pipe(process.stderr)
  app.on 'exit', (status) -> callback?() if status is 0#  
log = (message, color, explanation) -> 
  console.log color+message+reset+(explanation or '')#  
moduleExists = (name) ->
  try 
    require name 
  catch err 
    error name+ 'required: npm install '+name, red
    false#  
bin = (file) ->
  if file.match /.coffee$/
    fs.unlink file.replace(/.coffee$/, '.js')
    true
  else false#  
walk = (dir, done) ->
  # Directory Traversal
  results = []
  fs.readdir dir, (err, list) =>
    return done(err, []) if err
    pending = list.length
    return done(null, results) unless pending
    for name in list
      fs.stat dir+'/'+name, (e,stat)=>
        stat = null if e?
        if stat?.isDirectory()
          walk file, (err, res) =>
            results.push name for name in res
            done(null, results) unless --pending
        else
          results.push file
          done(null, results) unless --pending



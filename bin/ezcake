#!/usr/bin/env node
// Generated by CoffeeScript 1.7.1
(function() {
  var NPMPackage, async, cmd, ezcake, fs, path, require_tree, _;

  ezcake = (function() {
    ezcake.prototype.version = '0.0.1';

    ezcake.prototype.module_path = process.mainModule.filename.split('/bin').shift();

    ezcake.prototype.config_path = "data/json/default";

    ezcake.prototype.strings = {
      hash: '#',
      red: '\u001b[31m',
      green: '\u001b[32m',
      yellow: '\u001b[33m',
      reset: '\u001b[0m'
    };

    ezcake.prototype.ENV = void 0;

    ezcake.prototype.PATH = void 0;

    ezcake.prototype.COMMAND = void 0;

    ezcake.prototype.CONFIG = void 0;

    ezcake.prototype.NAME = void 0;

    ezcake.prototype.uConfig = {};

    function ezcake() {
      var uPath, user_config_exists, user_home_exists;
      this.config = require_tree(null);
      user_home_exists = false;
      user_config_exists = false;
      uPath = process.cwd();
      async.series([
        ((function(_this) {
          return function(cb) {
            return _this.createOpts(cb);
          };
        })(this)), ((function(_this) {
          return function(cb) {
            return fs.realpath('.', false, function(e, path) {
              if (e != null) {
                _this.error(e);
              }
              _this.$path = path;
              return cb(null, "ok");
            });
          };
        })(this)), ((function(_this) {
          return function(cb) {
            if ((_this.home = process.env.EZCAKE_HOME) !== void 0) {
              return fs.exists("" + _this.home, function(bool) {
                user_home_exists = bool;
                return fs.exists("" + _this.home + "/ezcake.json", function(bool) {
                  user_config_exists = bool;
                  return cb(null);
                });
              });
            }
          };
        })(this)), ((function(_this) {
          return function(cb) {
            return _this.preProcessArgs(cb);
          };
        })(this)), ((function(_this) {
          return function(cb) {
            if (user_config_exists && cmd.ignore) {
              process.chdir(_.initial(_this.home.split(path.sep)).join(path.sep));
              return _this.loadConfig(_.last(_this.home.split(path.sep)), function() {
                return cb();
              });
            } else {
              process.chdir(_.initial(("" + _this.module_path + "/" + _this.config_path).split(path.sep)).join(path.sep));
              return _this.loadConfig(_.last(_this.config_path.split(path.sep)), function() {
                if (user_home_exists) {
                  process.chdir(_.initial(_this.home.split(path.sep)).join(path.sep));
                  return _this.loadConfig(_.last(_this.home.split(path.sep)), function() {
                    process.chdir(uPath);
                    return cb();
                  });
                } else {
                  process.chdir(uPath);
                  return cb();
                }
              });
            }
          };
        })(this)), ((function(_this) {
          return function(cb) {
            if (cmd.location) {
              return _.each(cmd.location, function(location, idx) {
                process.chdir(_.initial(location.split(path.sep)).join(path.sep));
                return _this.loadConfig(_.last(location.split(path.sep)), function() {
                  process.chdir(uPath);
                  if (idx === cmd.location.length - 1) {
                    return cb(null, "ok");
                  }
                });
              });
            } else {
              return cb(null, "ok");
            }
          };
        })(this)), ((function(_this) {
          return function(cb) {
            _this.mergeConfigs();
            return cb(null);
          };
        })(this)), ((function(_this) {
          return function(cb) {
            _this.extendConfigurations();
            return _this.processArgs(cb);
          };
        })(this)), ((function(_this) {
          return function(cb) {
            if (process.argv[1].split('/').pop() === 'ezcake') {
              switch (_this.COMMAND) {
                case "create":
                case "c":
                  _this.onCreate();
                  break;
                case "init":
                case "i":
                  _this.onInit();
                  break;
                default:
                  if (typeof _this.COMMAND === 'undefined') {
                    cmd.usage("<command> [options]\n\n  where <command> is one of:\n    create, init\n    \n  hint: 'ezcake <command> -h' will give quick help on <command>").parse(process.argv);
                    process.exit(0);
                  } else {
                    _this.error("Command must be either 'create' or 'init' try \'ezcake create " + _this.COMMAND + "'");
                  }
              }
            }
            cmd.usage(_this.usage);
            return cb(null, "ok");
          };
        })(this)), ((function(_this) {
          return function(cb) {
            if (_this.CONFIG === "-h") {
              _this.CONFIG = null;
            }
            if (_this.CONFIG) {
              return _this.processConfiguration(cb);
            } else {
              process.argv.push('-h');
              _this.help();
              cmd.parse(process.argv);
              return process.exit(0);
            }
          };
        })(this)), ((function(_this) {
          return function(cb) {
            return _this.getOpts(cb);
          };
        })(this)), ((function(_this) {
          return function(cb) {
            if (_this.help()) {
              process.argv.push('-h');
            }
            return cb(null);
          };
        })(this)), ((function(_this) {
          return function(cb) {
            cmd.parse(process.argv);
            return cb(null);
          };
        })(this)), ((function(_this) {
          return function(cb) {
            _this.npmPackage = new NPMPackage(_this.$path);
            return _this.generateConfiguration(cb);
          };
        })(this))
      ], (function(_this) {
        return function(err, r) {
          _this.log("" + _this.strings.green + "ezCake completed" + _this.strings.reset + "\n");
          return process.exit(0);
        };
      })(this));
    }

    return ezcake;

  })();

  ezcake.prototype.onCreate = function() {
    this.usage = "create " + (this.CONFIG || '<type>') + " <name> [options]\n\n  Creates new " + (this.CONFIG || '<type>') + " configuration as directory <name> in current path";
    if (typeof this.CONFIG === 'undefined') {
      this.usage += "\n  Available types: " + (this.getConfigurations().join(', '));
    }
    if (typeof this.NAME !== 'undefined') {
      this.$path += "/" + this.NAME;
    } else {
      process.argv.push('-h');
    }
    return fs.exists(this.$path, (function(_this) {
      return function(bool) {
        if (!bool) {
          return fs.mkdir(_this.$path, function(e) {
            if (e != null) {
              _this.error(e);
            }
            return _this.success = "" + _this.CONFIG + " created as " + _this.NAME + "\n";
          });
        }
      };
    })(this));
  };

  ezcake.prototype.onInit = function() {
    this.usage = "init " + (this.CONFIG || '<type>') + " [options]\n\n  Creates or Updates " + (this.CONFIG || '<type>') + " Cakefile in current Project Directory";
    if (typeof this.CONFIG === 'undefined') {
      this.usage += "\n  Available types: " + (this.getConfigurations().join(', '));
    }
    return this.success = "Cakefile updated!\n";
  };

  ezcake.prototype.preProcessArgs = function(callback) {
    var args;
    args = [];
    _.each(process.argv, (function(_this) {
      return function(v, k) {
        if ((v.match(/^(\-h|\-\-help)+$/)) === null) {
          return args.push(v);
        }
      };
    })(this));
    cmd.parse(args);
    return callback(null);
  };

  ezcake.prototype.processArgs = function(cB) {
    if (process.argv.length < 3) {
      process.argv.push('-h');
    } else {
      process.argv.forEach((function(_this) {
        return function(val, index) {
          if (index === 0) {
            return (_this.ENV = val);
          }
          if (index === 1) {
            return (_this.PATH = val);
          }
          if (index === 2 && (typeof _this.COMMAND === 'undefined') && !(val.match(/^\-/))) {
            return (_this.COMMAND = val);
          }
          if (index === 3 && (_this.COMMAND.match(/create|init/)) && !(val.match(/^\-/))) {
            return (_this.CONFIG = val);
          }
          if (index === 4 && (_this.COMMAND.match(/create/)) && !(val.match(/^\-/))) {
            return (_this.NAME = val);
          }
        };
      })(this));
    }
    return cB();
  };

  ezcake.prototype.processConfiguration = function(cB) {
    if (!this.uConfig.configurations) {
      return this.error('No Configurations loaded');
    }
    if (typeof _.findWhere(this.uConfig.configurations, {
      name: this.CONFIG
    }) !== 'undefined') {
      cmd.option("-F, --no-config", "Do not create ezcake config file");
      return cB();
    } else {
      return this.error("Configuration '" + this.CONFIG + "' was not found");
    }
  };

  ezcake.prototype.createOpts = function(cB) {
    cmd.version("version: " + this.version).option("-I, --ignore", "ignore global config file if defined in env.EZCAKE_HOME").option("-O, --no-override", "do not allow loaded configs to override each other").option("-l, --location <paths>", "set path(s) of config file location(s)", function(arg) {
      return arg.split(',');
    });
    return cB();
  };

  ezcake.prototype.getOpts = function(cB) {
    var cnf;
    cnf = this.selectedConfig();
    _.each((this.commandModuleArr = [].concat(cnf.modules || [], cnf.commands || [], cnf.bundles || [])), (function(_this) {
      return function(v, k) {
        var t;
        if ((t = _.findWhere([].concat(_this.uConfig.modules, _this.uConfig.commands, _this.uConfig.bundles), {
          name: v.name
        })) != null) {
          if ((t.command != null) && t.command instanceof Array && t.command.length > 1) {
            cmd.option(t.command[0], t.command[1]);
          } else {
            return _this.error("command element for config " + cnf.name + " was " + (typeof t.command === 'undefined' ? 'missing' : 'malformed'));
          }
          if ((_.indexOf(t.command[1])) > -1 || process.argv[process.argv.length - 1].match(new RegExp("[" + (t.command[0].charAt(1)) + "]+"))) {
            if (typeof t.setFlag !== 'undefined' && (t.setFlag != null)) {
              return process.argv.push(t.setFlag);
            }
          }
        } else {
          return _this.error("" + (v.name || 'object') + " was not defined");
        }
      };
    })(this));
    return cB();
  };

  ezcake.prototype.help = function() {
    var idx;
    if ((idx = process.argv.indexOf('-h')) > -1) {
      return process.argv.splice(2, idx - 2);
    }
  };

  ezcake.prototype.loadConfig = function(p, cB) {
    return fs.exists(p, (function(_this) {
      return function(bool) {
        var addPath, callBack;
        if (!bool) {
          return _this.warn("config file " + p + " was not found");
        }
        addPath = p.split(path.sep).pop();
        callBack = function(d) {
          var c;
          if (_.isArray(c = _this.config.require_tree.loadedConfigs)) {
            _this.config.require_tree.loadedConfigs.push(addPath);
          } else {
            _this.config.require_tree.loadedConfigs = [addPath];
          }
          _this.config.require_tree.off('changed');
          return cB();
        };
        _this.config.require_tree.on('changed', callBack);
        return _this.config.require_tree.addTree(p);
      };
    })(this));
  };

  ezcake.prototype.extendConfigurations = function() {
    return _.each(this.uConfig.configurations, (function(_this) {
      return function(v, k) {
        var x;
        if ((v.inherits != null) && ((x = _.findWhere(_this.uConfig.configurations, {
          name: v.inherits
        })) != null)) {
          return _this.uConfig.configurations[k] = _.extend(_.clone(x), v);
        }
      };
    })(this));
  };

  ezcake.prototype.selectedConfig = function() {
    var c, conf;
    conf = {};
    _.each(_.keys(c = _.findWhere(this.uConfig.configurations, {
      name: this.CONFIG
    })), (function(_this) {
      return function(v, k) {
        return conf[v] = _.map(_this.uConfig[v], function(cV, cK) {
          return cV;
        });
      };
    })(this));
    return conf = _.extend(conf, {
      bundles: _.filter(this.uConfig.bundles, (function(_this) {
        return function(o) {
          return _.contains(c.bundles, o.name);
        };
      })(this)),
      modules: _.filter(this.uConfig.modules, (function(_this) {
        return function(o) {
          return _.contains(c.modules, o.name);
        };
      })(this)),
      tasks: _.filter(this.uConfig.tasks, (function(_this) {
        return function(o) {
          return _.contains(c.tasks, o.name);
        };
      })(this)),
      declarations: this.uConfig.declarations,
      helpers: this.uConfig.helpers
    });
  };

  ezcake.prototype.mergeConfigs = function(cB) {
    return _.each((cmd['override'] ? this.config.require_tree.loadedConfigs : this.config.require_tree.loadedConfigs.reverse()), (function(_this) {
      return function(v, k) {
        var pkg;
        return _.each((pkg = _this.config.require_tree.getPackage(v)), function(oV, oK) {
          var _base;
          if (_.isObject(pkg[oK]) && !(pkg[oK] instanceof Array)) {
            pkg[oK] = _.map(pkg[oK], function(itmV, itmK) {
              if (itmV.name != null) {
                return itmV;
              }
            });
          }
          if (pkg[oK] instanceof Array) {
            if ((_base = _this.uConfig)[oK] == null) {
              _base[oK] = [];
            }
            if (_this.uConfig[oK] instanceof Array) {
              return _.each(pkg[oK], function(itmV, itmK) {
                var f;
                if ((itmV.name != null) && (typeof (f = _.findWhere(_this.uConfig[oK], {
                  name: itmV.name
                })) !== 'undefined')) {
                  return _this.uConfig[oK][_.indexOf(_this.uConfig[oK], f)] = itmV;
                } else {
                  return _this.uConfig[oK].push(_.clone(itmV));
                }
              });
            } else {
              return _.each(pkg[oK], function(itmV, itmK) {
                if (itmV.name != null) {
                  return _this.uConfig[oK] = _.extend(_this.uConfig[oK] || {}, _.clone(itmV));
                }
              });
            }
          } else {
            return _this.uConfig[oK] = typeof pkg[oK] === 'string' ? "" + pkg[oK] : _.extend(_this.uConfig[oK] || {}, _.clone(pkg[oK]));
          }
        });
      };
    })(this));
  };

  ezcake.prototype.getConfigurations = function() {
    var configs;
    configs = [];
    _.each(this.config.require_tree.loadedConfigs, (function(_this) {
      return function(v, k) {
        var pkg;
        if ((pkg = _this.config.require_tree.getPackage(v)) != null) {
          return configs = _.union(configs, (!(pkg.configurations instanceof Array) ? _.keys(pkg.configurations) : _.pluck(pkg.configurations, 'name')));
        }
      };
    })(this));
    return configs;
  };

  NPMPackage = (function() {
    function NPMPackage(path) {
      this.path = path;
      this.pkgPath = "" + this.path + "/package.json";
    }

    NPMPackage.prototype.loadNPMPackage = function(callback) {
      if (this.pkgData != null) {
        callback(null, this.pkgData);
        return;
      }
      return fs.exists(this.pkgPath, (function(_this) {
        return function(bool) {
          if (bool) {
            return fs.readFile(_this.pkgPath, {
              encoding: 'utf-8'
            }, function(e, data) {
              return typeof callback === "function" ? callback(e, data != null ? _this.pkgData = JSON.parse(data) : null) : void 0;
            });
          } else {
            return _this.initNPMPackage(function(e, data) {
              return typeof callback === "function" ? callback(e, data) : void 0;
            });
          }
        };
      })(this));
    };

    NPMPackage.prototype.saveNPMPackage = function(callback) {
      var e;
      if (!(this.pkgData != null)) {
        return console.error("package data must be defined");
      }
      try {
        return fs.writeFile(this.pkgPath, JSON.stringify(this.pkgData, null, 2), {
          encoding: 'utf-8'
        }, (function(_this) {
          return function(e, data) {
            return typeof callback === "function" ? callback(e, _this.pkgData) : void 0;
          };
        })(this));
      } catch (_error) {
        e = _error;
        return console.err(e.message);
      }
    };

    NPMPackage.prototype.initNPMPackage = function(callback) {
      this.pkgData = {
        name: "" + this.NAME,
        author: "" + ((process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE).split(path.sep).pop()),
        version: '0.0.1',
        dependencies: {},
        devDependencies: {}
      };
      return this.saveNPMPackage(callback);
    };

    NPMPackage.prototype.addDependencies = function(npmItems, dev, callback) {
      if (dev == null) {
        dev = false;
      }
      console.log("adding deps: " + (JSON.stringify(npmItems, null, 2)));
      return this.getDependencies(dev, (function(_this) {
        return function(e, dependencies) {
          console.log("pkgData: " + (JSON.stringify(_this.pkgData, null, 2)));
          if (e != null) {
            return console.error(e);
          }
          _.each((npmItems instanceof Array ? npmItems : [npmItems]), function(npmItem, k) {
            var itm;
            if (!_.isObject(npmItem)) {
              return console.error('npmItem should be an object');
            }
            itm = NPMPackage.npmItem(npmItem.name, npmItem.version, npmItem.url);
            if (dependencies[itm.name] != null) {
              return dependencies[npmItem.name] = itm[npmItem.name];
            } else {
              return _.extend(dependencies, itm);
            }
          });
          return _this.saveNPMPackage(callback);
        };
      })(this));
    };

    NPMPackage.prototype.removeDependencies = function(npmItems, dev, callback) {
      if (dev == null) {
        dev = false;
      }
      if (!_.isObject(npmItem)) {
        return console.error('npmItem should be an object');
      }
      return this.getDependencies(dev, (function(_this) {
        return function(e, dependencies) {
          if (e != null) {
            return console.error(e);
          }
          _.each((npmItems instanceof Array ? npmItems : [npmItems]), function(npmItem, k) {
            if (!_.isObject(npmItem)) {
              return console.error('npmItem should be an object');
            }
            return _.each(npmItem, function(v, key) {
              return delete dependencies[k];
            });
          });
          return _this.saveNPMPackage(callback);
        };
      })(this));
    };

    NPMPackage.prototype.getDependencies = function(dev, callback) {
      if (dev == null) {
        dev = false;
      }
      return this.loadNPMPackage((function(_this) {
        return function(e, pkg) {
          return typeof callback === "function" ? callback(e, !dev ? pkg.dependencies != null ? pkg.dependencies : pkg.dependencies = {} : pkg.devDependencies != null ? pkg.devDependencies : pkg.devDependencies = {}) : void 0;
        };
      })(this));
    };

    return NPMPackage;

  })();

  NPMPackage.npmItem = function(name, version, url) {
    var o;
    if (!name) {
      return console.error('node module name is required');
    }
    (o = {})[name] = (url != null ? url : version) || '*';
    return o;
  };

  ezcake.prototype.hasDependencies = function() {
    var has;
    has = _.every(_.flatten(_.pluck(this.uConfigured, "required")), (function(_this) {
      return function(val) {
        return (_.find(_.pluck(_.extend({}, _this.declarations, _this.helpers, _this.uConfigured.modules), "name"), function(n) {
          return n === val;
        })) || false;
      };
    })(this));
    if (!has) {
      throw new Error("'" + val + "' was required but not found");
    }
    return true;
  };

  ezcake.prototype.getModCommands = function() {
    return this.uConfig.modules.concat(this.uConfig.commands);
  };

  ezcake.prototype.getRequires = function() {
    var arr;
    arr = _.flatten(_.compact(_.map(this.uConfig, (function(_this) {
      return function(v) {
        var a;
        if ((a = _.compact(_.pluck(v, 'requires'))).length) {
          return a;
        } else {
          return null;
        }
      };
    })(this))));
    return _.map(_.reject(arr, (function(_this) {
      return function(obj, key, list) {
        return _.compact(_.map(list.slice(key + 1, list.length), function(v, k) {
          if (_.isEqual(obj, v)) {
            return true;
          }
        })).length > 0;
      };
    })(this)), (function(_this) {
      return function(o) {
        if (o.type == null) {
          o.type = 'npm';
        }
        return o;
      };
    })(this));
  };

  ezcake.prototype.getDependencies = function() {
    return _.map(this.uConfig.modules, function(v, k) {
      var _ref, _ref1, _ref2;
      return {
        type: v.installer || 'npm',
        name: ((_ref = v.installer_options) != null ? _ref.alias : void 0) || v.name,
        version: ((_ref1 = v.installer_options) != null ? _ref1.version : void 0) || '*',
        development: ((_ref2 = v.installer_options) != null ? _ref2.development : void 0) || false
      };
    });
  };

  ezcake.prototype.getPaths = function(data) {
    var paths;
    paths = {};
    _.each(data, function(v, k) {
      if (v.paths != null) {
        return paths[v.name] = v.paths;
      }
    });
    return JSON.stringify(paths, null, 2);
  };

  ezcake.prototype.getExts = function() {
    return (_.compact(_.pluck(this.config["default"].modules, 'ext'))).join('|');
  };

  ezcake.prototype.getInvocations = function() {
    return _.filter(this.getModCommands(), function(o) {
      return o.invocations != null;
    });
  };

  ezcake.prototype.getCallbacks = function() {
    var callbacks, mC;
    mC = this.getModCommands();
    callbacks = [];
    _.each(_.map(_.compact(_.pluck(mC, 'callback')), function(v, k) {
      return {
        name: "on" + (v.charAt(0).toUpperCase()) + (v.slice(1)),
        invocations: []
      };
    }), (function(_this) {
      return function(v, k) {
        callbacks[k] = v;
        return _.each(_.filter(mC, function(o) {
          return o.invocations != null;
        }), function(fV, fK) {
          return _.each(_.filter(fV.invocations, function(o) {
            return o.call === v.name;
          }), function(iV, iK) {
            return callbacks[k].invocations.push({
              callee: fV.name,
              body: iV.body
            });
          });
        });
      };
    })(this));
    return callbacks;
  };

  ezcake.prototype.processTasks = function() {
    var m;
    m = this.getInvocations();
    return _.each(this.uConfig.tasks, (function(_this) {
      return function(v, k) {
        var name;
        name = "on" + (v.name.charAt(0).toUpperCase()) + (v.name.slice(1));
        _this.uConfig.tasks[k].invocations = [];
        return _.each(m, function(fV, fK) {
          return _.each(_.filter(fV.invocations, function(o) {
            return o.call === name;
          }), function(iV, iK) {
            if (iV.body.length) {
              return _this.uConfig.tasks[k].invocations.push({
                callee: fV.name,
                body: iV.body
              });
            }
          });
        });
      };
    })(this));
  };

  ezcake.prototype.getDeclarations = function() {
    var src;
    src = "";
    _.each(this.config["default"].declarations, (function(_this) {
      return function(v, k) {
        return src = "" + src + "\n\n" + (_this.template(path.join(_this.module_path, 'templates/_declaration.template.txt'), v));
      };
    })(this));
    return src;
  };

  ezcake.prototype.getHelpers = function() {
    return (_.map(this.config["default"].helpers, (function(_this) {
      return function(v, k) {
        return _this.template("" + (path.join(_this.module_path, 'templates/_helper.template.txt')), v);
      };
    })(this))).join("\n");
  };

  ezcake.prototype.getTasks = function() {
    return _.each(this.config["default"].tasks, (function(_this) {
      return function(v, k) {
        if (v.args == null) {
          v.args = '';
        }
        if (v.body == null) {
          v.body = '';
        }
        return _this.template("" + (path.join(_this.module_path, 'templates/_task.template.txt')), v);
      };
    })(this));
  };

  ezcake.prototype.template = function(p, params, callback) {
    return fs.readFile(p, {
      encoding: 'utf-8'
    }, (function(_this) {
      return function(e, data) {
        if (e != null) {
          return _this.error(e);
        }
        data = _.template(data, params);
        if (callback && typeof callback === 'function') {
          return callback(data);
        }
      };
    })(this));
  };

  ezcake.prototype.generateConfiguration = function(cB) {
    var bundles, deps, reqs;
    if ((bundles = this.uConfig.bundles) != null) {
      _.each(bundles, (function(_this) {
        return function(v, k) {
          if (cmd[v.name]) {
            return _.each(v, function(bV, bK) {
              var m;
              if (bK !== 'templates') {
                if (_.isObject(bV)) {
                  return _this.uConfig[bK] = _.union(_this.uConfig[bK] || [], bV);
                }
              } else {
                (m = {})[v.name] = bV;
                if (_.isObject(bV)) {
                  return _this.uConfig[bK] = _.extend(_this.uConfig[bK] || {}, m);
                }
              }
            });
          }
        };
      })(this));
    }
    this.processTasks();
    this.template("" + (path.join(this.module_path, this.config["default"].cake_template)), _.extend(this.uConfig, {
      reqs: (reqs = _.where(this.getRequires(), {
        type: 'npm'
      })),
      version: this.version,
      paths: this.getPaths(this.getModCommands()),
      exts: this.getExts(),
      callbacks: this.getCallbacks(),
      options: this.uConfig.options || [],
      templates: JSON.stringify(this.uConfig.templates, null, 2)
    }), (function(_this) {
      return function(rendered) {
        return fs.writeFile("" + _this.$path + "/Cakefile", rendered, null, function(e) {
          if (e != null) {
            return console.log(e);
          }
          return cB(null);
        });
      };
    })(this));
    this.npmPackage.addDependencies(_.where((deps = this.getDependencies()), {
      type: 'npm',
      development: false
    }));
    return this.npmPackage.addDependencies(_.where(deps, {
      type: 'npm',
      development: true
    }), true);
  };

  ezcake.prototype.log = function(m) {
    return process.stdout.write("" + m + "\n");
  };

  ezcake.prototype.warn = function(m) {
    return process.stdout.write("" + this.strings.yellow + "Warning: " + m + this.strings.reset + "\n");
  };

  ezcake.prototype.error = function(m) {
    process.stderr.write("" + this.strings.red + "Error: " + m + this.strings.reset + "\n");
    return process.exit(1);
  };

  fs = require('fs');

  path = require('path');

  async = require('async');

  cmd = require('commander');

  require_tree = require('require_tree').require_tree;

  _ = require('underscore');

  exports.EzCake = ezcake;

  if (process && process.argv && process.argv[1].split('/').pop() === 'ezcake') {
    new ezcake;
  }

}).call(this);
